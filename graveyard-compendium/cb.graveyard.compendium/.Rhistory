vjust = 0.4)) +
xlab("Raw Material") +
ylab("Weight (g)")
# 4h. fix the y-axis tick labels
library(scales)
ggplot(jerimalai_lithics_to_plot,
aes(reorder(Material, -Weight),
Weight)) +
geom_boxplot() +
scale_y_log10(labels = comma) + # nice axis tick labels
theme(axis.text.x = element_text(angle = 90,
hjust = 1,
vjust = 0.4)) +
xlab("Raw Material") +
ylab("Weight (g)")
# 4i. use nice theme
ggplot(jerimalai_lithics_to_plot,
aes(reorder(Material, -Weight),
Weight)) +
geom_boxplot() +
scale_y_log10(labels = comma) +
theme_bw() + # nice theme
theme(axis.text.x = element_text(angle = 90,
hjust = 1,
vjust = 0.4)) +
xlab("Raw Material")  +
ylab("Weight (g)")
library(ggforce)
ggplot(jerimalai_lithics_to_plot,
aes(reorder(Material, -Weight),
Weight)) +
geom_boxplot() +
geom_sina(alpha = 0.005) + # experiment with the value for alpha
scale_y_log10(labels = comma) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90,
hjust = 1,
vjust = 0.4)) +
xlab("Raw Material")  +
ylab("Weight (g)")
library(ggforce)
# 4i. use nice theme
ggplot(jerimalai_lithics_to_plot,
aes(reorder(Material, -Weight),
Weight)) +
geom_boxplot() +
scale_y_log10(labels = comma) +
theme_bw() + # nice theme
theme(axis.text.x = element_text(angle = 90,
hjust = 1,
vjust = 0.4)) +
xlab("Raw Material")  +
ylab("Weight (g)")
# 5a. basic
ggplot(jerimalai_lithics_to_plot,
aes(Length,
Width)) +
geom_point()
# 5b. add another variable with colour
ggplot(jerimalai_lithics_to_plot,
aes(Length,
Width,
colour = Material)) +
geom_point()
#  too many materials! Let's filter out a bunch
jerimalai_lithics_to_plot_raw_materials <-
jerimalai_lithics_to_plot %>%
filter(Material %in% c("Chert",
"Volcanic",
"Silcrete"))
# 5c. or use point shape, only good with small number of larger points
ggplot(jerimalai_lithics_to_plot_raw_materials,
aes(Length,
Width,
shape = Material)) +
geom_point()
# 5d. add another variable with point size
ggplot(jerimalai_lithics_to_plot_raw_materials,
aes(Length,
Width,
colour = Material,
size = Weight)) +
geom_point()
# 5e. adjust point size to an arbitrary size
ggplot(jerimalai_lithics_to_plot_raw_materials,
aes(Length,
Width,
colour = Material)) +
geom_point(size = 1)
# 5f. add a line of best fit
ggplot(jerimalai_lithics_to_plot_raw_materials,
aes(Length,
Width,
colour = Material)) +
geom_point(size = 1) +
geom_smooth()
ggplot(jerimalai_lithics_to_plot_raw_materials,
aes(Length,
Width)) +
geom_point(aes(colour = Material),
size = 1) +
geom_smooth()
ggplot(jerimalai_lithics_to_plot_raw_materials,
aes(Length,
Width)) +
geom_point(aes(colour = Material),
size = 1) +
geom_smooth(method = "lm")
l
library(ggpmisc)
ggplot(jerimalai_lithics_to_plot_raw_materials,
aes(Length,
Width)) +
geom_point(aes(colour = Material),
size = 1) +
geom_smooth(method = "lm",
se = FALSE,
color = "black",
formula = my.formula) +
stat_poly_eq(formula = my.formula,
aes(label = paste(..eq.label..,
..rr.label..,
sep = "~~~")),
parse = TRUE) +
theme_bw() +
xlab("Length (mm)") +
ylab("Width (mm)")
ggplot(jerimalai_lithics_to_plot_raw_materials,
aes(Width,
Length)) +    # plot
geom_point() +
geom_smooth(method = "lm") +
facet_wrap( ~ Material)
ggplot(jerimalai_lithics_to_plot_raw_materials,
aes(Width,
Length)) +    # plot
geom_point() +
geom_smooth(method = "lm") +
facet_wrap( ~ Material) +
coord_equal()
library(plotly) # excellent documentation at https://plot.ly/r/
j_silcrete <-
jerimalai_lithics_to_plot_raw_materials %>%
filter(Material == "Silcrete") %>%
ggplot(aes(Length,
Width)) +
geom_point()
# presto! interactive!
ggplotly(j_silcrete) # hover your mouse over the points
jerimalai_lithics_to_plot_si_vo <-
jerimalai_lithics_to_plot %>%
filter(Material %in% c("Silcrete",
"Volcanic"))
# 1. take a look, not very normally distributed, long right tails
ggplot(jerimalai_lithics_to_plot_si_vo,
aes(Length)) +
geom_histogram() +
facet_wrap( ~ Material,
ncol = 1,
scales = "free_y")
j_s_test1 <-
jerimalai_lithics_to_plot_si_vo %>%   # take the data frame...
split(.$Material) %>%                 # very similar to 'group_by'...
map(~ shapiro.test(.$Length))         # '.' stands for each data frame in the split
wilcox.test(Length ~ Material,  # the ~ is the formula interface, we can read ~ as 'by', or 'a function of'
data = jerimalai_lithics_to_plot_si_vo)
with(jerimalai_lithics_to_plot_si_vo,
wilcox.test(Length ~ Material))
jerimalai_lithics_to_plot_4 <-
jerimalai_lithics_to_plot %>%
filter(Material %in% c("Silcrete",
"Volcanic",
"Chert",
"Quartzite"))
ggplot(jerimalai_lithics_to_plot_4,
aes(Weight)) +
geom_histogram() +
facet_wrap( ~ Material,
ncol = 1,
scales = "free_y")
ggplot(jerimalai_lithics_to_plot_4,
aes(Weight)) +
geom_histogram() +
facet_wrap( ~ Material,
ncol = 1,
scales = "free_y") +
scale_x_log10()
# we can also use the boxplot effectively here
ggplot(jerimalai_lithics_to_plot_4,
aes(Material,
Weight)) +
geom_boxplot() +
geom_sina(alpha = 0.01) +
scale_y_log10()
# we can also use the boxplot effectively here
ggplot(jerimalai_lithics_to_plot_4,
aes(Material,
Weight)) +
geom_boxplot() +
geom_sina(alpha = 0.01) +
scale_y_log10()
ggplot(jerimalai_lithics_to_plot_4,
aes(Weight)) +
geom_histogram() +
facet_wrap( ~ Material,
ncol = 1,
scales = "free_y") +
scale_x_log10()
# we can also use the boxplot effectively here
ggplot(jerimalai_lithics_to_plot_4,
aes(Material,
Weight)) +
geom_boxplot() +
geom_sina(alpha = 0.01) +
scale_y_log10()
with(jerimalai_lithics_to_plot_4,
kruskal.test(Weight ~ as.factor(Material)))
library(FSA)
# import points as spreadsheet, this is just a simple spreadsheet with one point (site) per row, and UTM coordinates in two columns
library(readr)
pottery <- read_csv("data/pottery.csv")
# plot with ggplot, like a simple scatter plot
library(ggplot2)
ggplot(pottery,
aes(Xsugg,
Ysugg)) +
geom_point() +
coord_fixed() # this is important for maps
# add polygons, import shapefile as simple features object
library(sf)
geology <- read_sf("data/geology/geology.shp")
# to plot with ggplot, we convert to "Spatial" type, and then 'fortify'
# to make the coords available to ggplot:
geology_f <- fortify(as(geology, "Spatial"),
region = "Type")
ggplot() +
geom_polygon(data = geology_f,
aes(x = long,
y = lat,
group = group,
fill = id),
colour = "black") +
coord_fixed()
# and now the points and the polygons together
ggplot() +
geom_polygon(data = geology_f,
aes(x = long,
y = lat,
group = group,
fill = id),
colour = "black") +
geom_point(data = pottery,
aes(x = Xsugg,
y = Ysugg),
alpha = 0.3) +
coord_fixed() +
theme_bw()
pottery_sf <-
st_as_sf(pottery,
coords = c("Xsugg", "Ysugg"),
crs = st_crs(geology))
# do a spatial join, take the pottery data, and for each point, add cols
# from the geology polygon that contains it
pottery_joined_to_geology <- st_join(pottery_sf, geology)
library(dplyr)
pottery_in_geology_tally <-
pottery_joined_to_geology %>%
group_by(Type) %>%
summarise(n = n()) %>% # count the points
arrange(desc(n))
# first get the polygon areas....
geology_area_by_Type <-
geology %>%
mutate(area = st_area(.)) %>% # compute polygon area
group_by(Type) %>%
summarise(total_area_for_Type = sum(area))
# lets join the counts and areas together, then compute point density:
pottery_in_geology_density <-
geology_area_by_Type %>%
st_join(pottery_in_geology_tally) %>%
mutate(point_density_m2 = n / total_area_for_Type ) %>%
arrange(desc(point_density_m2))
# we can plot this
ggplot(pottery_in_geology_density,
aes(reorder(Type.x,
as.numeric(point_density_m2)),
as.numeric(point_density_m2))) +
geom_col() +
coord_flip() +
xlab("Geology") +
ylab("Points per m2") +
theme_minimal()
library(spatstat) # see http://spatstat.github.io/
pottery_in_Flysch <-
pottery_joined_to_geology %>%
filter(Type == "Flysch")
pottery_in_Rudist <-
pottery_joined_to_geology %>%
filter(Type == "Rudist bearing limestones")
# we need to create a new type of object, 'Planar point pattern'
pottery_in_Flysch_coords <- st_coordinates(pottery_in_Flysch)
pottery_in_Flysch_ppp <-
as.ppp(pottery_in_Flysch_coords,
owin(range(pottery_in_Flysch_coords[ , "X"]),
range(pottery_in_Flysch_coords[ , "Y"])))
pottery_in_Rudist_coords <- st_coordinates(pottery_in_Rudist),
pottery_in_Rudist_ppp <-
as.ppp(pottery_in_Rudist_coords,
owin(range(pottery_in_Rudist_coords[ , "X"]),
range(pottery_in_Rudist_coords[ , "Y"])))
setwd("~/Desktop/HIST3000/week-nine/teaching-replication-in-archaeology")
setwd("~/Desktop/HIST3000/week-ten/graveyard-compendium")
gvredux <- graveyards[c(2,6,7,12,13,30,35,41)]
gvredux <- graveyards[c(2,6,7,12,13,30,35,41)]
# adjust the next line accordingly:
setwd("/Users/homebase/Desktop/HIST3000/week-ten/graveyard-compendium/cb.graveyard.compendium")
rrtools::use_analysis()
#--- Step 2: GET THE GRAVEYARDS DATA
library(curl)
graveyards <- read.csv( curl("https://raw.githubusercontent.com/shawngraham/hist3000/master/static/data/graveyards-data.csv") )
write.csv (graveyards, "analysis/data/raw_data/my_csv_file.csv")
View(graveyards)
gvredux <- graveyards[c(2,6,7,12,13,30,35,41)]
View(gvredux)
gvredux <- graveyards[c(3,7,8,13,14,31,36,42)]
View(gvredux)
library(ggplot2)
View(gvredux)
library(ggplot2)
ggplot(gvredux,
aes(x = Date.of.monument,
y = Monument.type)) +
geom_line()
library(streamgraph)
install.packages(streamgraph)
devtools::install_github("hrbrmstr/streamgraph")
library(streamgraph)
test <- streamgraph(gvredux, key="name", value="Monument.type", date="Date.of.monument", height="300px", width="1000px")
library(plyr)
count(gvredux, "Date.of.monument")
count(gvredux, "Date.of.monument")
count(gvredux, c("Date.of.monument", "Monument.type"))
datetype %>%
streamgraph("Monument.type", "freq", "Date.of.monument")
datetype <- count(gvredux, c("Date.of.monument", "Monument.type"))
datetype %>%
streamgraph("Monument.type", "freq", "Date.of.monument")
datetype[!is.na(datetype$Date.of.monument),]
datetype %>%
streamgraph("Monument.type", "freq", "Date.of.monument")
datetype %>%
count(gvredux, c("Date.of.monument", "Monument.type")) %>%
datetype[!is.na(datetype$Date.of.monument),]
datetype <- count(gvredux, c("Date.of.monument", "Monument.type")) %>%
dtfinal <- datetype[!is.na(datetype$Date.of.monument),]
datetype <- count(gvredux, c("Date.of.monument", "Monument.type"))
dtfinal <- datetype[!is.na(datetype$Date.of.monument),]
datetype %>%
streamgraph("Monument.type", "freq", "Date.of.monument")
dtfinal %>%
streamgraph("Monument.type", "freq", "Date.of.monument")
dtfinal %>%
streamgraph("Monument.type", "freq", "Date.of.monument", offset="zero")
dtfinal %>%
streamgraph("Monument.type", "freq", "Date.of.monument", offset="zero", interpolate="step")
count(gvredux, "Date.of.monument")
datetype <- count(gvredux, c("Date.of.monument", "Letter.styles"))
datestyle <- count(gvredux, c("Date.of.monument", "Letter.styles"))
dsfinal <- datestyle[!is.na(datestyle$Date.of.monument),]
dsfinal %>%
streamgraph("Letter.style", "freq", "Date.of.monument", offset="zero", interpolate="step")
count(gvredux, c("Date.of.monument", "Letter.styles"))
count(gvredux, c("Date.of.monument", "Letter.styles"))
dsfinal <- datestyle[!is.na(datestyle$Date.of.monument),]
View(dsfinal)
count(gvredux, "Letter.styles")
test <- count(gvredux, c("Date.of.monument", "Letter.styles"))
test <- count(gvredux, "Letter.styles")
separate(
test,
Letter.styles,
into,
sep = "[^[:3]]+",
remove = TRUE,
convert = FALSE,
extra = "warn",
fill = "warn",
...
)
library(tidyr)
separate(
test,
Letter.styles,
into,
sep = "[^[:3]]+",
remove = TRUE,
convert = FALSE,
extra = "warn",
fill = "warn",
...
)
separate(
test,
Letter.styles,
into,
sep = "[^[:3]]+",
remove = TRUE,
convert = FALSE,
extra = "warn",
fill = "warn"
)
separate(
test,
"Letter.styles",
sep = "[^[:3]]+",
remove = TRUE,
convert = FALSE,
extra = "warn",
fill = "warn"
)
separate(
test,
"Letter.styles",
into,
sep = "[^[:3]]+",
remove = TRUE,
convert = FALSE,
extra = "warn",
fill = "warn"
)
separate(
test,
"Letter.styles",
into = "NA",
sep = "[^[:3]]+",
remove = TRUE,
convert = FALSE,
extra = "warn",
fill = "warn"
)
test <- count(gvredux, "Letter.styles")
View(test)
test <- count(gvredux, "Letter.styles")
test <- test[!is.na(test$Letter.styles),]
check <- separate(
test,
"Letter.styles",
into = "NA",
sep = "[^[:3]]+",
remove = TRUE,
convert = FALSE,
extra = "warn",
fill = "warn"
)
View(check)
View(test)
test <- count(gvredux, "Letter.styles")
test <- test[!is.na(test$Letter.styles),]
check <- separate(
test,
"Letter.styles",
into = "Letter.styles",
sep = "[^[:3]]+",
remove = TRUE,
convert = FALSE,
extra = "warn",
fill = "warn"
)
View(check)
check <- separate(
test,
"Letter.styles",
into = NA,
sep = "[^[:3]]+",
remove = TRUE,
convert = FALSE,
extra = "warn",
fill = "warn"
)
# stealing my modded data for mapping
write.csv(gvredux,"/Users/homebase/Desktop/gvredux.csv", row.names = FALSE)
View(graveyards)
head(graveyards)
gvredux <- gvredux[!is.na(gvredux$X_Grave.monument.Coordinates_longitude, gvredux$X_Grave.monument.Coordinates_latitude),]
gvredux <- gvredux[!is.na(gvredux$X_Grave.monument.Coordinates_longitude),!is.na(gvredux$X_Grave.monument.Coordinates_longitude),]
gvredux <- gvredux[!is.na(gvredux$X_Grave.monument.Coordinates_longitude),!is.na(gvredux$X_Grave.monument.Coordinates_latitude),]
gvredux <- gvredux[!is.na(gvredux$X_Grave.monument.Coordinates_longitude),]
gvredux <- gvredux[!is.na(gvredux$X_Grave.monument.Coordinates_longitude),]
gvredux <- gvredux[!is.na(gvredux$X_Grave.monument.Coordinates_latitude)]
gvredux <- gvredux[!is.na(gvredux$X_Grave.monument.Coordinates_longitude),]
gvredux <- gvredux[!is.na(gvredux$X_Grave.monument.Coordinates_latitude),]
gvredux <- graveyards[c(3,7,8,13,14,31,36,42)]
View(gvredux)
gvredux <- gvredux[!is.na(gvredux$X_Grave.monument.Coordinates_longitude),]
gvredux <- gvredux[!is.na(gvredux$X_Grave.monument.Coordinates_latitude),]
View(gvredux)
gvredux <- gvredux[!is.na(gvredux$X_Grave.monument.Coordinates_longitude),]
gvredux <- gvredux[!is.na(gvredux$X_Grave.monument.Coordinates_latitude),]
View(gvredux)
write.csv(gvredux,"/Users/homebase/Desktop/gvredux.csv", row.names = FALSE)
gvredux <- graveyards[c(3,7,8,13,14,31,36,42)]
View(gvredux)
datetype <- count(gvredux, c("Date.of.monument", "Monument.type"))
dtfinal <- datetype[!is.na(datetype$Date.of.monument),]
dtfinal %>%
streamgraph("Letter.style", "freq", "Date.of.monument", offset="zero", interpolate="step")
library(htmlwidgets)
saveWidget(dtfinal, file=paste0("/Users/homebase/Desktop/HIST3000/digihum-site/content/images", "/HtmlWidget/streamgraphOffset1.html"))
saveWidget(dtfinal, file=paste0("/Users/homebase/Desktop/HIST3000/digihum-site/content/images", "/HtmlWidget/datetype.html"))
saveWidget(dtfinal, file="/Users/homebase/Desktop/HIST3000/digihum-site/content/images/HtmlWidget/datetype.html"))
saveWidget(dtfinal, file="/Users/homebase/Desktop/HIST3000/digihum-site/content/images/HtmlWidget/datetype.html")
saveWidget(dtfinal, file="/Users/homebase/Desktop/HtmlWidget/datetype.html")
